/*
 * Estrava
 *
 * Cool Estrava tings
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	//"github.com/gorilla/mux"
)

// RunsApiController binds http requests to an api service and writes the service results to the http response
type RunsApiController struct {
	service RunsApiServicer
	errorHandler ErrorHandler
}

// RunsApiOption for how the controller is set up.
type RunsApiOption func(*RunsApiController)

// WithRunsApiErrorHandler inject ErrorHandler into controller
func WithRunsApiErrorHandler(h ErrorHandler) RunsApiOption {
	return func(c *RunsApiController) {
		c.errorHandler = h
	}
}

// NewRunsApiController creates a default api controller
func NewRunsApiController(s RunsApiServicer, opts ...RunsApiOption) Router {
	controller := &RunsApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RunsApiController
func (c *RunsApiController) Routes() Routes {
	return Routes{ 
		{
			"RunGet",
			strings.ToUpper("Get"),
			"/run",
			c.RunGet,
		},
		{
			"RunPost",
			strings.ToUpper("Post"),
			"/run",
			c.RunPost,
		},
		{
			"TestingGet",
			strings.ToUpper("Get"),
			"/testing",
			c.TestingGet,
		},
		{
			"TestingPost",
			strings.ToUpper("Post"),
			"/testing",
			c.TestingPost,
		},
	}
}

// RunGet - 
func (c *RunsApiController) RunGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	usernameParam := query.Get("username")
	titleParam := query.Get("title")
	dateParam := query.Get("date")
	result, err := c.service.RunGet(r.Context(), usernameParam, titleParam, dateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RunPost - 
func (c *RunsApiController) RunPost(w http.ResponseWriter, r *http.Request) {
	runGetRequestParam := RunGetRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&runGetRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRunGetRequestRequired(runGetRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RunPost(r.Context(), runGetRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// TestingGet - 
func (c *RunsApiController) TestingGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	usernameParam := query.Get("username")
	titleParam := query.Get("title")
	dateParam := query.Get("date")
	result, err := c.service.TestingGet(r.Context(), usernameParam, titleParam, dateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// TestingPost - 
func (c *RunsApiController) TestingPost(w http.ResponseWriter, r *http.Request) {
	runGetRequestParam := RunGetRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&runGetRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRunGetRequestRequired(runGetRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.TestingPost(r.Context(), runGetRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

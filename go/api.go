/*
 * Estrava
 *
 * Cool Estrava tings
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
)



// RunsApiRouter defines the required methods for binding the api requests to a responses for the RunsApi
// The RunsApiRouter implementation should parse necessary information from the http request,
// pass the data to a RunsApiServicer to perform the required actions, then write the service results to the http response.
type RunsApiRouter interface { 
	RunGet(http.ResponseWriter, *http.Request)
	RunPost(http.ResponseWriter, *http.Request)
	TestingGet(http.ResponseWriter, *http.Request)
	TestingPost(http.ResponseWriter, *http.Request)
}
// UsersApiRouter defines the required methods for binding the api requests to a responses for the UsersApi
// The UsersApiRouter implementation should parse necessary information from the http request,
// pass the data to a UsersApiServicer to perform the required actions, then write the service results to the http response.
type UsersApiRouter interface { 
	UserPost(http.ResponseWriter, *http.Request)
}


// RunsApiServicer defines the api actions for the RunsApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type RunsApiServicer interface { 
	RunGet(context.Context, string, string, string) (ImplResponse, error)
	RunPost(context.Context, RunGetRequest) (ImplResponse, error)
	TestingGet(context.Context, string, string, string) (ImplResponse, error)
	TestingPost(context.Context, RunGetRequest) (ImplResponse, error)
}


// UsersApiServicer defines the api actions for the UsersApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UsersApiServicer interface { 
	UserPost(context.Context, UserPostRequest) (ImplResponse, error)
}
